<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>升级Apache2.4.18到Apache2.4.38</title>
      <link href="/2019/08/26/%E5%8D%87%E7%BA%A7Apache2.4.18%E5%88%B0Apache2.4.38/"/>
      <url>/2019/08/26/%E5%8D%87%E7%BA%A7Apache2.4.18%E5%88%B0Apache2.4.38/</url>
      
        <content type="html"><![CDATA[<p>1.安装平台环境要求：<br>Ubuntu:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You will need to ensure that you have either libtool 1.5.6</span><br><span class="line">or 2.2.6b, or later. Expat 2.0.1 and PCRE 8.02 are also</span><br><span class="line">recommended to be installed. If building PCRE from source,</span><br><span class="line">you'll also need g++.</span><br></pre></td></tr></table></figure><p>没有libtool和PCRE时，需要先安装libtool和PCRE<br>pcre 的安装可以参考<br><a href="https://stackoverflow.com/questions/10663180/apache-installation-libpcre-error" target="_blank" rel="noopener">https://stackoverflow.com/questions/10663180/apache-installation-libpcre-error</a></p><ol start="2"><li>下载解压apache2.4.38</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/local</span><br><span class="line"><span class="meta">$</span> wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.38.tar.gz</span><br><span class="line"><span class="meta">$</span> tar zxvf httpd-2.4.38.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>进入httpd-2.4.38目录，执行命令安装apache2<br><code>$ ./configure --prefix=/usr/local/apache2</code><br><br>报错： configure: error: APR not found.  Please read the documentation.<br><br>通过INSTALL文件了解到需要安装APR and APR-Util</li><li>安装APR and APR-Util到srclib目录下<br><br>进入httpd-2.4.38下的srclib目录，执行命令下载并解压APR and APR-Util</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget http://mirrors.hust.edu.cn/apache//apr/apr-1.6.5.tar.gz</span><br><span class="line"><span class="meta">$</span> wget http://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span><br><span class="line"><span class="meta">$</span> tar zxvf apr-1.6.5.tar.gz</span><br><span class="line"><span class="meta">$</span> tar zxvf apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure><p>注意： 解压后的文件名不能带版本号，将apr-1.6.5改名为apr，apr-util-1.6.1改名为apr-util</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mv apr-1.6.5 apr</span><br><span class="line"><span class="meta">$</span> mv apr-util-1.6.1 apr-util</span><br><span class="line"><span class="meta">$</span> rm apr-1.6.5.tar.gz apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure><p>5.回到httpd-2.4.38根目录，再次执行./configure –prefix=/usr/local/apache2, 无报错后继续执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> make</span><br><span class="line"><span class="meta">$</span> make install</span><br></pre></td></tr></table></figure><p>成功执行后在/usr/local目录下会发现apache2已经存在</p><p>6.将原apache版本中定义的环境变量加到新的apache bin目录下的envvars文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/local/apache2/bin</span><br><span class="line"><span class="meta">$</span> cat /etc/apache2/envvars &gt;&gt; envvars</span><br></pre></td></tr></table></figure><p>7.修改httpd.conf, 注释掉listen 80和ServerAdmin，在文件尾添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServerTokens OS</span><br><span class="line"><span class="meta">#</span>These need to be set in /usr/local/apache2/bin/envvars</span><br><span class="line">User $&#123;APACHE_RUN_USER&#125;</span><br><span class="line">Group $&#123;APACHE_RUN_GROUP&#125;</span><br><span class="line">IncludeOptional conf/sites-enabled/*.conf</span><br></pre></td></tr></table></figure><p>并将日志文件的路径替换为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br></pre></td></tr></table></figure><p>将“User daemon  Group daemon” 改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User $&#123;APACHE_RUN_USER&#125;</span><br><span class="line">Group $&#123;APACHE_RUN_GROUP&#125;</span><br></pre></td></tr></table></figure><p>8.将旧版本apache下的 sites-enabled复制到/usr/local/apache2/conf<br><code>$ cp -r  /etc/apache2/sites-enabled/ /usr/local/apache2/conf/</code></p><p>9.停止旧的服务（或者开放新的端口进行测试），启动新版apache进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/local/apache2/bin</span><br><span class="line"><span class="meta">$</span> ./apachectl start</span><br></pre></td></tr></table></figure><p>报错：Invalid command ‘XSendFile’, perhaps misspelled or defined by a module not included in the server configuration<br>这种报错是因为有些模块没有加载造成的，进入旧版apache的模块目录，将缺少的模块复制到新版中，并在httpd.conf中加载即可(也可以自己下载)<br>测试发现缺少mod_xsendfile.so和mod_wsgi.so</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cp  /usr/lib/apache2/modules/mod_xsendfile.so   /usr/local/apache2/modules</span><br><span class="line"><span class="meta">$</span> cp /usr/lib/apache2/modules/mod_wsgi.so  /usr/local/apache2/modules</span><br><span class="line"><span class="meta">$</span> cd  /usr/local/apache2/modules</span><br><span class="line"><span class="meta">$</span> sudo chmod +x mod_xsendfile.so mod_wsgi.so</span><br></pre></td></tr></table></figure><p>在新版本的httpd.conf中加载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoadModule wsgi_module modules/mod_wsgi.so</span><br><span class="line">LoadModule xsendfile_module modules/mod_xsendfile.so</span><br></pre></td></tr></table></figure><p>取消 httpd.conf 中 deflate_module、negotiation_module、rewrite_module的注释</p><p>重启新版apache</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/local/apache2/bin</span><br><span class="line"><span class="meta">$</span> ./apachectl restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>科一考试</title>
      <link href="/2019/08/05/%E7%A7%91%E4%B8%80%E8%80%83%E8%AF%95/"/>
      <url>/2019/08/05/%E7%A7%91%E4%B8%80%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>今天上午顺利通过了科目一的考试，可能你会好奇，这么晚了才学车啊？是啊，只怪大学没听各位学长学姐的建议去学车，欠的迟早是要还的😤。说起这次考试，还真的是不容易啊。<br><br><br>早上5点10分，成功被闹钟叫醒，然后坐起来晃了下神，迷迷糊糊的洗刷完毕后，就匆匆的去赶6点多的班车了。从家到班车站点大约有6，7分钟的路程，刚下过雨，走在路上感到格外的凉爽，空气也被雨水净化得非常清新。一块去考试的还有一个大学的同学，6点十几，我们在班车上会和，之后就是在半睡半醒的状态里奔赴了我们的战场。<br><br><br>本来从出发一直到学校都不是很紧张的，因为在家模拟考试也模拟了很多次了，成绩也都非常的理想，但是来到驾校理论考试的楼层还是莫名的紧张起来。原以为是8点考试的，结果法培老师说先考科三理论，然后才是到我们科一理论（这有点打乱了我的计划，本来想着早点考完正好返回去直接到公司上班，时间差不多刚刚好，也就没请上午的假）。我们只好临时在一间教室里等待着开考。还不如直接去考，等待的时间更是有些让人紧张😂。</p><p>等待期间，老师先讲了下各种注意事项及考驾照的总流程，之后就带着我们复习一些易错题目，时间就这样一分一秒过去，终于收到通知让我们去机房考试，当时的心情是既紧张又兴奋。我们领取完各自的准考证明、存放好包之类的物品后，来到了考场门前排队，一个挨一个的刷身份证刷脸进入，进到教室再刷身份证查看自己的座号。接下来就是进行紧张的考试了。在家模拟做题很快的我放慢了做题速度，力求作对每一道题，在做过了50多道题后还没错一道，心里想着接下来更得认真仔细，突然，一个猝不及防的弹框出现了，把我的节奏一下子打乱了，好吧，做错一道题。紧接着又是一个弹窗。。。emmm，连错两道，这道还是看错了选项。心里不禁慌乱起来，不行，得稳住啊，这趋势下去还了得。在稍微平复下心态后继续答题，最终错了三题。</p><p>然后考完进行了签字确认，就在楼门口和同学会和了，幸运的是我俩都过了，之后就愉快的去12号楼约科目二的车了。</p><p>约完车就火急火燎的往公司赶了，在车上看到同事发消息说下午的会议挪到上午了，我天！这有点点背啊。因为考试时间推迟的原因，要赶上也有些不可能了，于是赶紧和领导说明了下情况。提醒自己下次考试可得记得请假了，不然遇到这种情况影响也太不好了。。。</p><p>总之，能顺利通过科一还是很开心的，接下来的训练，继续加油💪！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pkg打包</title>
      <link href="/2019/07/14/pkg%E6%89%93%E5%8C%85/"/>
      <url>/2019/07/14/pkg%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>最近项目要改版，最大的变动就是更换组件库，同时转发 server 也由 Python 转为了 Node。因为前端对 Js 更加熟悉，转发 server 用 Node 对前端或者新加入的新人来说都更加友好些。</p><p>既然是个 Node 应用，自然想到了使用 pkg 将其打包进行部署。于是没接触过 pkg 的我开始研究如何将 Node 应用使用 pkg 进行打包。</p><p><a name="N9Uxh"></a></p><h4 id="pkg-简介"><a href="#pkg-简介" class="headerlink" title="pkg 简介"></a>pkg 简介</h4><p>首先简单介绍下 <a href="https://github.com/zeit/pkg" target="_blank" rel="noopener">pkg</a> 这个库，下面试官方的介绍：</p><p>This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.</p><p>这个命令行工具是专门用来打包 Node 项目的，最终 Node 项目会被打包成可执行文件，这个可执行文件甚至可以在你不安装 Node 环境的情况下运行。并且，打包时可以指定打包平台，让可执行文件可以在像 linux、mac、windows等多个平台运行。</p><p><a name="EsrGB"></a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先需要安装下 pkg，可以本地和全局安装，一般进行下本地安装就足够了。安装命令很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install pkg    // 本地安装</span><br><span class="line">npm install pkg -g // 全局安装</span><br></pre></td></tr></table></figure><p><a name="nZlnT"></a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置可以分为两种类型，一种是直接打包 Node 入口文件的方式，另一种是通过在 package.json 中添加配置字段进行配置。<br>关于各个配置项不再多加赘述，可以直接在官网看到。下面贴出我们项目的目录结构，并以我们项目为例介绍下两种打包方式。<br><br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1563156452292-0251ed06-3acf-4d11-b14a-e4349d474c92.png#align=left&display=inline&height=399&name=image.png&originHeight=1188&originWidth=724&size=115664&status=done&width=243" alt="image.png"></p><ol><li>通过打包 Node 入口文件方式直接进行打包<br>只需要在 package.json 的 “scripts” 字段添加或者如果全局安装了的话直接运行下面命令:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg ./server/app.js -t node10-macos-x64 -o /a/b/文件名</span><br></pre></td></tr></table></figure><pre><code>这样就算配置完成了，但是这种配置有个问题就是无法将前端 webpack 打包出的相关文件自动打包进可执行文       件中，必须通过提供打包好的文件夹如 dist 文件夹。</code></pre><ol start="2"><li>通过配置 package.json 方式进行打包</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "start": "npm run dev",</span><br><span class="line">   "dev": "node build/dev-server",</span><br><span class="line">   "dev-server": "NODE_ENV=development node server/app.js",</span><br><span class="line">   "build": "node build/build.js",</span><br><span class="line">   "lint": "eslint --ext .js,.jsx src test",</span><br><span class="line">   "test": "jest",</span><br><span class="line">   "pkg": "pkg . --target=node10-linux-x64 --out-path=pkg",</span><br><span class="line">   "pkg-mac": "pkg . --target=node10-macos-x64 --out-path=pkg",</span><br><span class="line">   "pkg-win": "pkg . --target=node10-win-x64 --out-path=pkg"</span><br><span class="line"> &#125;,</span><br><span class="line"> "pkg": &#123;</span><br><span class="line">   "assets": [</span><br><span class="line">     "server/views/**/*.pug",</span><br><span class="line">     "dist/static/css/**/*.css",</span><br><span class="line">     <span class="string">"dist/static/images/**/*"</span></span><br><span class="line">   ],</span><br><span class="line">   "scripts": [</span><br><span class="line">     <span class="string">"dist/static/js/**/*.js"</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>这种方式在配置时考虑的问题会更多一些，但是配置好了使用起来特别方便。你可以配置任何你想打包进去的内容，而且生成的可执行文件可以在任何目录双击打开（第一种方式直接双击执行会出问题，默认执行目录会变为当前 user 目录）<br>配置时需要注意 dependencies 里的依赖包会被打包进可执行文件中<br></p><p><a name="WC0ke"></a></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>除了写配置文件，Node 路径相关的代码也需要做些调整，使用 path.join(__dirname, ‘xxx’) 这种的路径资源打包的时候会被检测到，直接使用绝对路径或者动态 require 的不会被检测到，所以可以根据这样的原则来写代码决定是否要讲文件打包进可执行文件。<br></p><p><a name="QNuQL"></a></p><h4 id="关于-package-json"><a href="#关于-package-json" class="headerlink" title="关于 package.json"></a>关于 package.json</h4><p>建议将 Node 相关的依赖单独放到一个 package.json 中，可以分两个文件夹 client 和 server，每个文件夹下有各自的 package.json, 因为在实践中发现 dependencies 的依赖会打包进可执行文件， devDependencies 也会部分打包进可执行文件，所以如果前后端依赖放到一个 package.json 会增大最后可执行文件的体积。具体哪些依赖被加入了可执行文件可以在使用 pkg 命令时添加 –debug 来查看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitconfig文件</title>
      <link href="/2019/06/24/gitconfig%E6%96%87%E4%BB%B6/"/>
      <url>/2019/06/24/gitconfig%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>gitconfig 顾名思义就是 git 的配置文件，一般我们在使用 git 的过程中，接触不到这个文件。直到有一次我和一个朋友（后文称作老王，其实人家不老😅）共用一个服务器时，发现我的 blog 提交历史中显示的用户名是老王的邮箱和头像，我才慢慢开始接触到这个文件。</p><p><a name="6g9vS"></a></p><h3 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h3><p>我和老王共用了一台服务器来搭建我们各自的博客系统，blog 都是采用 hexo 搭建，由于 hexo 默认使用全局的 git 用户名和邮箱配置，以至于在老王运行过 git config –global user.name “xxx” 及 git config –global user.email “xxx@yyy” 之后，我们两个的的提交都使用了这个全局的配置，我的 git 仓库的提交历史也自然变为了他的名字。<br><a id="more"></a><br><a name="NP1PA"></a></p><h3 id="找寻原理"><a href="#找寻原理" class="headerlink" title="找寻原理"></a>找寻原理</h3><p>于是我开始查找 git config –global user.x “y” 到底做了什么，原来这个命令是做了一个写配置项事情（如果不加”y”则读相应的配置项）当我运行这个命令时，会自动往 ~/.gitconfig 文件增加配置项，没有这个文件的话会自动创建，让我们认识下这个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561367627805-db079845-9a6f-41b3-b1c0-f29623f296a7.png#align=left&display=inline&height=85&name=image.png&originHeight=170&originWidth=834&size=32893&status=done&width=417" alt="image.png"></p><p>由于我只 config 过 user 相关的选项所以这里只添加了 user 的配置。<br>除了 –global 之外，我们还可以 git config –system 添加系统级别的 git 配置，保存在 /etc/gitconfig 文件中，<br>此外，每个项目也可以有自己单独的 gitconfig 配置文件，存放于项目 .git/config 文件中，我们可以在 .git 目录下手动创建也可以直接 git config user.name ‘xxx’，以这种命令行的形式添加配置（执行该命令需注意两点：1. 需在 git 项目目录下, 不一定是根目录，2. 不加 –global or –system）， 然后查看下配置文件</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561368349702-da132976-8a50-47c4-a46d-86b667cdff7c.png#align=left&display=inline&height=128&name=image.png&originHeight=256&originWidth=546&size=33972&status=done&width=273" alt="image.png"></p><p>发现我们的用户名已经写入，并且还可以看到这个项目其他的一些 git 默认配置项，比如 core, 可以通过 git config core.xxx 进行修改。<br>不难想到，在项目中进行提交的时候，优先会采用项目内的 git 变量配置，项目内没有接着找全局的，全居的没有再找系统级别的，采用就近原则。每一个级别的配置都会覆盖上层的相同配置（同名变量）。<br><a name="jk0Kn"></a></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>找到问题所在，我们商量后注释了全局配置文件内的用户名邮箱，在各自项目的 .deploy_git 文件夹下的 .git/config 文件内添加了各自的用户配置，至此，再提交问题得到完美解决。<br>这只是解决了新的历史记录的问题，旧的历史记录还是老王的信息，可以通过下面脚本批量修正</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">OLD_EMAIL="your-old-email@example.com"</span></span><br><span class="line"><span class="string">CORRECT_NAME="Your Correct Name"</span></span><br><span class="line"><span class="string">CORRECT_EMAIL="your-correct-email@example.com"</span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象遍历</title>
      <link href="/2019/06/20/%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86/"/>
      <url>/2019/06/20/%E5%AF%B9%E8%B1%A1%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p><a name="2ObMk"></a></p><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>这个方法获取的是「自身」「可枚举」 的属性的key， 不可枚举及从原型继承来的属性的 key 不可获得，返回值为 key 组成的数组。<br><a name="qSUPw"></a></p><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p>这个方法获取的是自身属性的 key， 包括可枚举和不可枚举属性的 key，返回值为 key 组成的数组。<br><a name="4cA43"></a></p><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p>遍历自身及原型链上继承来的可枚举属性</p><p>上面介绍的这几项无法获取到 Symbol 值的 key，但可以通过 <strong>Object.getOwnPropertySymbols()</strong> 获取自身的 Symbol 值的key，这里不考虑 Symbol 的情况。<br><a id="more"></a><br><a name="TzS78"></a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testObj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  two: <span class="number">2</span>,</span><br><span class="line">  three: <span class="number">3</span>,</span><br><span class="line">  four: <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(testObj, <span class="string">'6'</span>, &#123;</span><br><span class="line">  value: <span class="string">'six'</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.prototype.seven = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---- Object.keys ----'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(testObj));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---- Object.getOwnPropertyNames ----'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(testObj));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---- for in ----'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> testObj) <span class="built_in">console</span>.log(key);</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561003174099-b12af3a1-8832-4b71-8230-9d701b7e81e3.png#align=left&display=inline&height=337&name=image.png&originHeight=674&originWidth=1050&size=57341&status=done&width=525" alt="image.png"><br><a name="ACtN6"></a></p><h4 id="分析并发现问题"><a href="#分析并发现问题" class="headerlink" title="分析并发现问题"></a>分析并发现问题</h4><p>testObj 的属性中, key 值为 ‘6’ 的为不可枚举属性，key 值为 ‘seven’ 的为原型链上的属性。Object.keys 和 Object.getOwnPropertyNames 返回的都是自身的属性，区别在于 getOwnPropertyNames 返回结果中包含不可枚举的属性，for in 遍历自身及原型链上可枚举的属性。<br>从打印的结果我发现几个问题:</p><ul><li>key 的顺序为什么不是创建的顺序</li><li>for …  in 如何只遍历自身属性的 key </li><li>如何得到对象自身不可枚举的 key</li></ul><p><a name="X8bKR"></a></p><h5 id="1-key-的顺序问题"><a href="#1-key-的顺序问题" class="headerlink" title="1. key 的顺序问题"></a>1. key 的顺序问题</h5><p>大多数浏览器的新版本按照这样的方式处理: 将整数型的key排在前面，不是整数型的key按照创建的顺序排(整数型指变为整数再从整数变回来，改变前后完全相同的数), 例如 “+1” -&gt; 1 -&gt; ‘1’, 则 +1 不是整数型key).<br>我们可以改下上面的 testObj，再次进行测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testObj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  two: <span class="number">2</span>,</span><br><span class="line">  three: <span class="number">3</span>,</span><br><span class="line">  four: <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(testObj));</span><br><span class="line"><span class="keyword">delete</span> testObj[<span class="string">'two'</span>]</span><br><span class="line">testObj[<span class="string">'two'</span>] = <span class="string">'2'</span>; <span class="comment">// 新创建</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(testObj));</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561015364391-19d0f7cb-de52-4d48-8af8-9c2147ce01ad.png#align=left&display=inline&height=87&name=image.png&originHeight=174&originWidth=566&size=16728&status=done&width=283" alt="image.png"><br>但在一些老的浏览器并不是按照这样的方式处理的，所以不同浏览器存在差异，如果想对顺序有特别的要求，建议还是对返回的存储key的数组进行处理后，使其按特定顺序输出。<br><a name="5GoIp"></a></p><h5 id="2-for-…-in-如何只遍历自身属性的-key"><a href="#2-for-…-in-如何只遍历自身属性的-key" class="headerlink" title="2. for … in 如何只遍历自身属性的 key"></a>2. for … in 如何只遍历自身属性的 key</h5><p>可以使用 *<em>hasOwnProperty *</em>进行判断过滤。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testObj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  two: <span class="number">2</span>,</span><br><span class="line">  three: <span class="number">3</span>,</span><br><span class="line">  four: <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.seven = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---- for in ----'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> testObj) &#123;</span><br><span class="line"><span class="keyword">if</span> (testObj.hasOwnProperty(key)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561015910280-3891022e-b982-4456-ac57-b0d5f447f546.png#align=left&display=inline&height=198&name=image.png&originHeight=396&originWidth=674&size=17701&status=done&width=337" alt="image.png"><br><a name="ipj3Y"></a></p><h5 id="3-如何得到对象自身不可枚举的-key"><a href="#3-如何得到对象自身不可枚举的-key" class="headerlink" title="3.如何得到对象自身不可枚举的 key"></a>3.如何得到对象自身不可枚举的 key</h5><p>不考虑 Symbol 的key，Object.getOwnPropertyNames() 得到的 key 去掉 Object.keys() 得到的 key 就是不可枚举的 key。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testObj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  two: <span class="number">2</span>,</span><br><span class="line">  three: <span class="number">3</span>,</span><br><span class="line">  four: <span class="number">4</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(testObj, <span class="string">'6'</span>, &#123;</span><br><span class="line">  value: <span class="string">'six'</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(testObj);</span><br><span class="line"><span class="keyword">const</span> allKeys = <span class="built_in">Object</span>.getOwnPropertyNames(testObj);</span><br><span class="line"><span class="keyword">const</span> enumerableKeys = <span class="built_in">Object</span>.keys(testObj);</span><br><span class="line"><span class="keyword">const</span> unEnumerableKeys = allKeys.filter(<span class="function"><span class="params">key</span> =&gt;</span> enumerableKeys.indexOf(key) === <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'unEnumerableKeys:'</span>, unEnumerableKeys);</span><br></pre></td></tr></table></figure><p>这里 chrome 浏览器有个奇怪的 bug, 去掉第12行的打印在 Chrome 74.0.3729.169（正式版本） （64 位）通过 getOwnPropertyNames 无法得到不可枚举的key， safari 测试正常。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561020198272-5bd2fe9b-33e6-460a-8a14-9ed8dcfa8879.png#align=left&display=inline&height=211&name=image.png&originHeight=422&originWidth=710&size=33228&status=done&width=355" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab CI|CD初探</title>
      <link href="/2019/05/22/Gitlab%20CI%7CCD%E5%88%9D%E6%8E%A2/"/>
      <url>/2019/05/22/Gitlab%20CI%7CCD%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>项目中现在使用了 gitlab 的 webhook 进行自动部署，最近看了下 CI/CD， 觉得也可以使用这个进行自动化部署，但是最后还是放弃了，主要原因是现在的自动化部署相对比较成熟，已经满足了绝大部分的需求，更换为 CI/CD 方式体验不一定会变得更好。<br><a id="more"></a><br>下面介绍几个相关概念：</p><p><a name="fIGki"></a></p><h4 id="Pipeline-流水线"><a href="#Pipeline-流水线" class="headerlink" title="Pipeline(流水线)"></a>Pipeline(流水线)</h4><p>当我们进行push, merge等操作时，都会触发 Pipeline</p><p><a name="yRULn"></a></p><h4 id="Stages-时期"><a href="#Stages-时期" class="headerlink" title="Stages(时期)"></a>Stages(时期)</h4><p>每个 Pipeline 包含三个 stage 阶段（build, test, deploy），前一个 stage 阶段失败，后面就会不再执行，代表这个构建任务 - Pipeline 失败。</p><p><a name="H62iJ"></a></p><h4 id="Jobs-任务"><a href="#Jobs-任务" class="headerlink" title="Jobs(任务)"></a>Jobs(任务)</h4><p>每隔 stage 阶段里可以有若干的 job，相同 stage 阶段中的 job 是并行执行的，该 stage 阶段下的所有 job 都执行成功后这个 stage 阶段才通过，继续执行下一阶段，否则构建任务失败。</p><p><a name="6NYlZ"></a></p><h4 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h4><p>jobs 需要 runner 去执行，我们可以使用 gitlab 提供的 runner 去执行我们的 job， 也可以自己注册，注册时可以进行一些配置，成功注册后也可以去 tomal 配置文件里修改之前的配置。在 job 中可以指定 tag 去对应 tag 的 runner 上执行， runner 也可以配置接收所有 tag 的 job。</p><p><a name="cCKin"></a></p><h4 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h4><p>这个文件来配置我们构建过程，配置成功后，再次 push、merge 等操作只要触发了在 job 中配置的事件，就会去 runner 上执行对应的 job 脚本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化部署优化</title>
      <link href="/2019/05/22/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/"/>
      <url>/2019/05/22/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>现在我正在做的项目使用了 webhook 进行自动化部署，每当 testing 分支有 push 或者 merger request 被合并进去，就会触发我们的自动化部署。<br>大体实现就是通过 gitlab 提供的 webhook 服务，配置下监听 push 或者 merge request 事件的 url（一个服务地址), 由于 merge request 分为三种状态 created/updated/merged ，我们只在 merged 时进行自动化部署。当收到 gitlab 发来的请求，我们会在测试云主机开启服务进行接收处理，进行一些请求校验后进行打包、部署。打包是基于我们在测试云主机上有当前项目的 git 仓库，打包时会重新拉下最新的代码，之后进行打包操作。<br><a id="more"></a><br>但是公司的项目是部署在私有的 gitlab 上，这就需要连接 vpn 访问项目地址。为了安全问题，没三个月必须更换下自己的密码，经常会出现更换了密码忘记去机器上更换的情况，导致合并 mr 后没有进行自动化部署，错过了一次 webhook 请求，只有手动去打包部署了，最主要是合并 mr 之后以为已经正常部署了，等到发现出错了已经是好几个小时之后了。。。<br>发现这个小问题后，我优化了下之前的代码，将我们的 vpn 用户名和密码通过一个文件进行维护，大体类似这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vpn_account_config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">  [userName, passwd],</span><br><span class="line">  [userName1, passwd1],</span><br><span class="line">  [userName2, passwd2],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>由于换密码通常也就固定的几个密码进行切换，所以这个数组元素也不会很多。<br>当收到 webhook 请求，并且校验通过后，我先进行一下 checkVpn 操作，具体实现就是使用了 node 的 dns 模块，查找我们 gitlab 域名对应的 ip,查找失败，就在日志里提示“未配置 host”，查找到后使用第三方的 “net-ping”进行ping ip操作，ping 成功后执行与之前相同的逻辑，失败后进行 changePasswd，从我们维护的账号密码数组里（vpn_account_config.js）按顺序取出一组，写到 passwd.txt(vpn 连接时的账号文件)，如果取出的这组 passwd.txt 已经存在，则跳过继续取下一组写入到文件，写入完成后重启 vpn，继续进行checkVpn 操作，循环往复，直到连接成功或者维护的账号密码都无法连接成功后退出。连接成功则进行进行之前的逻辑（打包、部署等），失败则进行提示“需要手动更换密码连接 vpn”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git场景</title>
      <link href="/2019/05/16/git%E5%9C%BA%E6%99%AF/"/>
      <url>/2019/05/16/git%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p><a name="GVqhA"></a></p><h4 id="1-Scene-One"><a href="#1-Scene-One" class="headerlink" title="1. Scene One"></a>1. Scene One</h4><p>一个 mr 里既有这次发版的内容，又有下次发版的内容，需要将下次发版的内容从 mr 中移除。<br>首先将不需要提交到 mr 的内容 git cherry-pick 到一个单独的分支，然后执行 git rebase 操作将不在本次发版中的内容 drop 掉，之后再重新提交分支<br><a id="more"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入浅出 webpack》读书笔记</title>
      <link href="/2019/05/05/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20webpack%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/05/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%20webpack%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本文主要记录下在看这本书时的所感所想，可能存在诸多错误，慢慢更正。</p><p><a name="AjMdu"></a></p><h3 id="第一章-入门"><a href="#第一章-入门" class="headerlink" title="第一章 入门"></a>第一章 入门</h3><p><a name="8vrzF"></a></p><h4 id="一、loader-使用方式"><a href="#一、loader-使用方式" class="headerlink" title="一、loader 使用方式"></a>一、loader 使用方式</h4><ol><li>可以定义在 webpack 的配置文件中</li><li>可以在引入模块时指定 loader （这种方式几乎不用）</li></ol><p>例：import ‘style-loader!css-loader?minimize!./css/main.css’;<br>注: loader 的执行顺序为由后到前<br><a id="more"></a><br><a name="JbfFL"></a></p><h4 id="二、loader-的配置方式"><a href="#二、loader-的配置方式" class="headerlink" title="二、loader 的配置方式"></a>二、loader 的配置方式</h4><ol><li>通过 url query string 传参 </li></ol><p>!css-loader?minimize</p><ol start="2"><li>通过对象</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use: ['style-loader', &#123;</span><br><span class="line"> loader: 'css-loader',</span><br><span class="line">  options: &#123;</span><br><span class="line">    minimize: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p><a name="PrFZf"></a></p><h4 id="三、style-loader-执行原理"><a href="#三、style-loader-执行原理" class="headerlink" title="三、style-loader 执行原理"></a>三、style-loader 执行原理</h4><p>将 css 用 js 的字符串存储起来，当页面渲染的时候，动态向 html 的 head 里 添加 style 标签（标签个数由css 文件个数决定）<br><a name="ITBtJ"></a></p><h4 id="四、通过-mini-css-extract-plugin-打包-css-到单独的文件中"><a href="#四、通过-mini-css-extract-plugin-打包-css-到单独的文件中" class="headerlink" title="四、通过 mini-css-extract-plugin 打包 css 到单独的文件中"></a>四、通过 mini-css-extract-plugin 打包 css 到单独的文件中</h4><p><a name="CZyJh"></a></p><h4 id="五、webpack-dev-server"><a href="#五、webpack-dev-server" class="headerlink" title="五、webpack-dev-server"></a>五、webpack-dev-server</h4><p>启动服务后，webpack 构建后的文件保存在内存中，其实构建的文件的保存路径受到 devServer.publicPath 的影响，除此之外还受到 output.publicPath 的影响，具体关系可以用以下表达式表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建文件保存路径 = devServer.publicPath ？devServer.publicPath : (output.publicPath || <span class="string">'/'</span>)</span><br></pre></td></tr></table></figure><p>devServer.publicPath 优先级最高，在 devServer.publicPath 未设置的情况下， 若设置了 output.publicPath，则构建文件保存路径与 output.publicPath 一致（即 devServer.publicPath 等于 output.publicPath），否则默认为 ‘/‘, 若设置了 devServer.publicPath，则按照 devServer.publicPath 进行保存。<br>所以在 index.html 引入构建后的文件时，需要根据以上条件填写路径。也可以访问 服务地址/webpack-dev-server 点击查看文件的实际保存路径,</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1557741079153-7ef5ce4a-4972-427a-9e0f-44be2b7101c3.png#align=left&display=inline&height=99&name=image.png&originHeight=118&originWidth=465&size=19673&status=done&width=390" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回家</title>
      <link href="/2019/05/05/%E5%9B%9E%E5%AE%B6/"/>
      <url>/2019/05/05/%E5%9B%9E%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<p>前不久，一个打小就是好朋友的父亲过世了，这个消息彻彻底底地把我惊住了。因为就在去年春节我去他家玩的时候，叔叔还好好的，没想到刚刚几个月的时间，叔叔竟然因为脑出血离世了。<br>这让我深深的体会到了世事的无常。我们在命运面前，显得如此的弱小、无力。谁也说不好明天会发生什么，唯一能做的就是珍惜每一天。<a id="more"></a></p><p>本来打算五一去这去那玩的我决定和对象一起回我家。爸爸也特地请假回家待两天（爸爸在工地干活，节假日也是不放假的）。刚走近家门，就闻到了浓浓的饭香，爸妈肯定早早准备好了饭菜等待我们了。首先见到的是妈妈，她显得憔悴瘦弱了很多，听妈妈说她最近两天不舒服，吃不下饭，现在好多了。然后见到了爸爸，又黑又瘦。爸爸已经年近六十，但是仍然特别要强，我提过好几次说我已经长大了，可以养活自己了，您不需要再那么辛苦了， 而爸爸总是笑着说，没事儿，我干的活不累。因为放假，姐姐姐夫和小外甥也和我们一块回家来了，接着我们欢欢乐乐的吃了个大团圆饭，充满了家的温暖。</p><p>吃过饭，我们来到田野间散步，眼前是一片绿色海洋， 大片的麦田，风中夹杂着麦香，深吸一口气，哇，家乡的空气真好啊，没有汽车的嘈杂声、没有雾霾，只剩下鸟语花香，麦浪滚滚，宁静而祥和。</p><p>接下来的几天，差不多都是这样度过，一起吃吃饭、一起看看电视、一起出门溜溜、一起赶赶集、逛逛超市，重复但不单调，简单但很幸福。</p><p>假期转眼已经到了尾声，妈妈的身体也变好了，可能是因为儿女们都在家，心情好的原因吧哈哈。分别的早上，饭桌上妈妈和爸爸还是不停地唠叨（嘱咐）我，在外吃好穿好，别舍不得花钱，注意人身安全，多运动多锻炼……唉，每次都是这样😂，不管多大，在父母眼中，我们永远是长不大小孩儿。</p><p>坐在回北京的火车上，心里感到不舍，多想一直待在家里啊。因为学习和工作的原因，我们能陪伴父母的时间越来越少了，放假有时间还是尽量多回家团圆团圆吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次依赖循环引用</title>
      <link href="/2019/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BE%9D%E8%B5%96%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/"/>
      <url>/2019/04/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BE%9D%E8%B5%96%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a name="b7014211"></a></p><h4 id="发现报错"><a href="#发现报错" class="headerlink" title="发现报错"></a>发现报错</h4><p>在项目升级了依赖包后，出现了 eslint 报如下错误：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1555494977280-1850e41c-1127-40e5-9b51-774d2d0f6417.png#align=left&display=inline&height=210&name=%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-17%20%E4%B8%8B%E5%8D%8812.28.05.png&originHeight=430&originWidth=943&size=76121&status=done&width=460" alt="屏幕快照 2019-04-17 下午12.28.05.png"></p><p>奇怪啊，之前也有 eslint, 完全没有这个报错啊？怀疑是之前 eslint 版本太低的原因，导致还没进行依赖循环引用的 lint. 在 eslint no-circle 规则的文档里有循环引用的示例。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dep-b.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./dep-a.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dep-a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; b &#125; <span class="keyword">from</span> <span class="string">'./dep-b.js'</span> <span class="comment">// reported: Dependency cycle detected.</span></span><br></pre></td></tr></table></figure><p>两个文件相互引用就会报   <code>// reported: Dependency cycle detected.</code><br><br><a name="9e473a65"></a></p><h4 id="根据报错寻找出错点"><a href="#根据报错寻找出错点" class="headerlink" title="根据报错寻找出错点"></a>根据报错寻找出错点</h4><p>根据 eslint 的报错，发现大多数报错集中在 index.js 文件。项目中的 index.js 文件大部分作用是将代码集中导出，方便引入。<br>继续跟进，根据 index.js 报错的行数，进入具体文件查看, 终于发现了问题。<br>我们的组件都放到了 components 目录下，然后 components 下的 index.js 里将所有组件引入并导出，同时 在 webpack 配置文件里对 components 目录起了别名，以后其他文件用到某几个组件的话，可以类似下面这样引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Button, Table, Form &#125; <span class="keyword">from</span> <span class="string">'components'</span>;</span><br></pre></td></tr></table></figure><p>简化了写路径的麻烦。<br>但是，在 components 下的组件里，我发现也有直接从 components 根目录 index.js 文件里引其他组件的，<br>比如 Table 组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Toolbar &#125; <span class="keyword">from</span> <span class="string">'../../'</span>;</span><br></pre></td></tr></table></figure><p>这样就造成了循环引用，Table 引 index.js， index.js 引入Table。<br>找到原因，于是进行一通大改，把类似的改成如下格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Toolbar &#125; <span class="keyword">from</span> <span class="string">'./Toolbar'</span>;</span><br></pre></td></tr></table></figure><p>引入时直接引入所需组件目录，这样避免了相互引用。<br><a name="520f9e6c"></a></p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>改完后，发现报错消失了。虽然项目相互引用没有导致页面崩溃，但是应该避免出现，防止出现意外的 bug。<br>相互引用类似递归，如果无限循环的话会导致页面崩溃，内存溢出。</p><p><a name="20a6503f"></a></p><h4 id="相互引用小栗子"><a href="#相互引用小栗子" class="headerlink" title="相互引用小栗子"></a>相互引用小栗子</h4><p>在网上看到一个很好的例子，并进行了改造。</p><p>event.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; odd &#125; <span class="keyword">from</span> <span class="string">'./odd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">  counter: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">even</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  obj.counter++;</span><br><span class="line">  n !== <span class="number">0</span> &amp;&amp; odd(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>odd.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; even, obj &#125; <span class="keyword">from</span> <span class="string">'./even'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">odd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  obj.counter++;</span><br><span class="line">  n != <span class="number">0</span> &amp;&amp; even(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; even, obj &#125; <span class="keyword">from</span> <span class="string">'./even.js'</span>;</span><br><span class="line"></span><br><span class="line">even(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'counter result:'</span>, obj.counter);</span><br></pre></td></tr></table></figure><p>这里，even 文件引用了 odd 文件， odd 文件同时引用了 even 文件，存在着循环引用的问题。<br>在 test.js 这个测试文件中， 我们引入 even.js 进行测试，向 even 方法传入参数 10，当执行 even 时，计数器 counter 自加，若 n 大于零会 执行 odd 方法并传入参数 n-1, 同理， 当执行 odd 时, 计数器 counter 自加, 传入的参数如果大于 0，会调用 even 方法并传入参数 n - 1。这样循环递归调用，直到 n 变为 0 截止。<br>那么我们可能会有疑问，这样循环引用，js 能顺利执行吗? 假设能顺利执行的话，odd.js 中能改变 even.js 文件中的计数器吗? 最后输出的 counter, 是只在 even 文件中自加的结果还是两个文件共同自加的结果？<br>接下来， 我们看下测试结果:<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1555662967828-a0d5f4fe-64da-42df-8620-0f7d4d370230.png#align=left&display=inline&height=78&name=image.png&originHeight=118&originWidth=588&size=15217&status=done&width=388" alt="image.png"></p><p>很明显，程序顺利执行，并且 odd 确实改变了 even 文件内的计数器参数。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1555662806820-60adad1d-6e5a-46a4-8297-680c6989fe1e.png#align=left&display=inline&height=75&name=image.png&originHeight=122&originWidth=630&size=15691&status=done&width=386" alt="image.png"></p><p>那么， 我们同时把 even 和 odd 方法的 n == 0 这个判断条件去掉呢？<br>可以想象，两个方法会无限循环的相互调用下去。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1555663452416-22910612-3a38-47d4-936a-880f71257e13.png#align=left&display=inline&height=88&name=image.png&originHeight=174&originWidth=770&size=29387&status=done&width=390" alt="image.png"></p><p>正如我们所预料的那样。</p><p>从中我们可以总结出至少两个结论：</p><ul><li>ES6 模块的循环加载，如果存在着相互调用，且存在截止条件，并不会是程序崩溃。但是，如果造成了无限循环调用，会使得程序崩溃，内存溢出。</li><li>ES6 模块，使用 import 引入时，其实是建立了与模块之间的引用，当用到引入的模块中的变量时，再去模块里取值。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 事件流</title>
      <link href="/2019/04/08/js%20%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/2019/04/08/js%20%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>js 事件流是指事件在 dom 中流转的顺序（或者传播路径），事件流转分为三个过程，捕获阶段 - 目标阶段 - 冒泡阶段。下面我们通过实践探索下事件流机制。<br><a name="507829ed"></a></p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><p>首先用 html 和 css 实现如下效果<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1554799009812-0da6e023-b092-4172-a55d-bd247c79a133.png#align=left&display=inline&height=217&name=image.png&originHeight=678&originWidth=678&size=18409&status=done&width=217" alt="image.png"></p><a id="more"></a><br>接着我们通过 js 代码来控制事件回调执行的时机<ul><li>回调在冒泡阶段执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调冒泡阶段执行</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'wraper'</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'outer'</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'inner'</span>), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>我们分别点击wrapper、outer、inner，查看打印结果</p><table><thead><tr><th>点击对象</th><th>打印结果</th></tr></thead><tbody><tr><td>wrapper</td><td>wrapper</td></tr><tr><td>outer</td><td>outer、wrapper</td></tr><tr><td>inner</td><td>inner、outer、wrapper</td></tr></tbody></table><p>从打印结果我们可以得出如下结论:<br>当我们点击某个节点时，首先打印该节点的内容，然后，从该节点开始向上冒泡，若父级监听了相同的事件， 那么父级对应的事件回调也会执行，直到 window。</p><ul><li>回调在捕获阶段执行</li></ul><p>接着我们把上面 js 代码 addEventListener 的第三个参数改为 true，让回调在捕获阶段执行，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调捕获阶段执行</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'wraper'</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'outer'</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'inner'</span>), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>然后再次分别点击wrapper、outer、inner，查看打印结果</p><table><thead><tr><th>点击对象</th><th>打印结果</th></tr></thead><tbody><tr><td>wrapper</td><td>wrapper</td></tr><tr><td>outer</td><td>wrapper、outer</td></tr><tr><td>inner</td><td>wrapper、outer、inner</td></tr></tbody></table><p>从这次的打印结果，我们可以得出结论：<br>当某个节点被点击时，事件流从顶级 window 依次向下传播，若传播到的节点也监听了相同的事件，那么该事件的回调也会执行，直到该点击节点。</p><ul><li>混合</li></ul><p>下面我们看下更复杂的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'wraper one'</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.wrapper'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'wraper two'</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.outer'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'outer'</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; log(<span class="string">'inner'</span>), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>依次点击wrapper、outer、inner， 看下打印结果</p><table><thead><tr><th>点击对象</th><th>打印结果</th></tr></thead><tbody><tr><td>wrapper</td><td>wrapper one、wrapper two</td></tr><tr><td>outer</td><td>wrapper one、outer、wrapper two</td></tr><tr><td>inner</td><td>wrapper one、inner、outer、wrapper two</td></tr></tbody></table><p>由这次的打印结果及之前的结论，我们可以得出最终的结论。<br><a name="8c9d507e"></a></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>事件回调的执行顺序是按照事件流来的传播顺序执行的，首先是捕获阶段，若从window 到 当前点击节点的有捕获阶段的监听函数，则按照从顶级 window 到当前点击节点的传播顺序执行回调，接着到达目标阶段，即执行当前点击节点的回调，最后是冒泡阶段，若从当前节点到顶级 window 有冒泡阶段的监听函数，则按照这个传播顺序执行回调。</p><p>注: 事件的监听节点可以看做是目标阶段，若是一个节点既在捕获阶段又在冒泡阶段监听了相同的事件，那么这个节点两个事件回调的执行顺序按照事件的添加的顺序执行（不区分捕获阶段和冒泡阶段，同属于目标阶段）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx负载均衡初实践</title>
      <link href="/2019/04/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%88%9D%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/04/02/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%88%9D%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>负载均衡是为了将请求分流，避免过多的请求连接大量涌进一台服务器，导致服务器压力过大，致使服务器响应缓慢甚至宕机。使用负载均衡可以使得多个服务器共同分担压力，降低单台服务器压力，加快响应速度。<br>负载均衡的高明之处在于对用户而言，完全意识不到自己访问的不是一个服务器，而是服务器集群，这样即使一台机器出现问题无法访问，用户仍然可以从其它机器访问到想访问的内容。<br><a id="more"></a><br><a name="f515195a"></a></p><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><p>nginx 负载均衡策略分为内置策略和扩展策略。下面举些列子。<br>内置策略：<br>ip_hash: 用户第一次访问的是哪台服务器，之后访问就会固定访问这台服务器，避免每次都要重新登录<br>      backup: 备份，其它服务器没法访问时访问这台服务器<br>down: 不参与负载均衡的服务器<br>weight: 权重，权重越大，被访问到的可能性越大，比如三台服务器权重分别为2，3，5，那么被访问到的概率就为20%， 30%， 50%<br>扩展策略：<br>fair: 使用响应时间快的那台服务器<br>……<br>其它策略可以在网上搜索了解下。</p><p><a name="57782bdb"></a></p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>ubuntu 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p><a name="224e2ccd"></a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">upstream lb_test &#123;</span><br><span class="line"></span><br><span class="line">       server 127.0.0.1:3000 weight=2;</span><br><span class="line"></span><br><span class="line">       server 127.0.0.1:3001 weight=5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">       listen 8080;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">               proxy_pass http://lb_test/;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在一台机器上搭建环境来测试下 nginx 负载均衡。<br>首先使用 upstream 进行负载均衡配置，这里配置了 3000和3001 两个服务（可理解为两个服务器）<br>然后我们在 3000 和 3001 端口启动两个服务，页面内容为server1, server2。<br>之后我们访问 8080 端口时会出现 server1， server2 随机出现的情况，由于3001（server2）的权重更大，所以 server2 出现的频率更高。<br>下面修改下配置，加入 ip_hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream lb_test &#123;</span><br><span class="line"></span><br><span class="line">       server 127.0.0.1:3000 weight=2;</span><br><span class="line"></span><br><span class="line">       server 127.0.0.1:3001 weight=5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 nginx 服务，再次访问 8080，会发现一直显示一个服务的内容（server1 或者 server2, 由第一次访问时看到的内容决定);</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parseInt用法详解</title>
      <link href="/2019/03/08/parseInt%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/08/parseInt%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>今天在 MDN 深究了下 parseInt 的用法，顿时觉得头要炸了，后来花了些时间总算搞明白了，写下来记录下，免得以后范蒙。</p><p><a name="6146f119"></a></p><h5 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h5><p>parseInt(<em>string</em>, <em>radix</em>);<br>一句话描述其作用就是将用 radix 进制表示的 string 最终转换为十进制。<br><a name="c947d18b"></a></p><h5 id="2-具体实践"><a href="#2-具体实践" class="headerlink" title="2. 具体实践"></a>2. 具体实践</h5><p>举几个基本的小栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'255'</span>) <span class="comment">// 255 不写 radix 参数指定几进制时，一般默认采用十进制，建议始终带第二个参数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11'</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'011'</span>, <span class="number">8</span>) <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0x11'</span>, <span class="number">16</span>) <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><a id="more"></a><br>看过这些，是不是想说挺简单的啊，也就那么回事儿。那我们来看几类特殊的东西，恶心一下。<p>(1) 以正常进制数作为 radix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos; 11&apos;, 10) // 11 从第一个不是空字符的数字开始 parse</span><br><span class="line">parseInt(&apos; a11&apos;, 10) // NaN 第一个不是空字符的字符不是数字，转换为 NaN</span><br><span class="line">parseInt(&apos; 11a11&apos;, 10) // 11 从第一个不是空字符的数字开始, 截止到下个非数字的字符进行 parse</span><br><span class="line">parseInt(&apos; &apos;) // NaN 仅空字符转换为 NaN</span><br></pre></td></tr></table></figure><p><a name="2a4115e4"></a></p><h6 id="2-以-0-或-undefined-作为-radix"><a href="#2-以-0-或-undefined-作为-radix" class="headerlink" title="(2) 以 0 或 undefined 作为 radix"></a>(2) 以 0 或 undefined 作为 radix</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'011'</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// es3 9 | es5+ 11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">011</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0x11</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// 17</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0x11'</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// 17</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0xx11'</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'0x11x11'</span>, <span class="number">0</span> 或 <span class="literal">undefined</span>) <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><p>结论：radix 为 0 或者 undefined，会根据情况解析为 8进制、10进制、16进制，<br>当去除空字符以 0 开头时， 数字会被认为是8进制进行parse，字符串在 es3 会认为是8进制，但 es5 废除了这个规则，按10进制处理。<br>当去除空字符以非0数字开头时，按10进制处理。<br>当去除空字符以 0x 开头时，无论是字符串还是整数都按 16 进制进行 parse。 0x后面直接紧跟字母会 parse 为 NaN， 如果是 16进制数后又加其他非数字字符串，则只 parse 数字部分。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件库打包 umd 发布</title>
      <link href="/2019/03/06/%E7%BB%84%E4%BB%B6%E5%BA%93%E6%89%93%E5%8C%85%20umd%20%E5%8F%91%E5%B8%83/"/>
      <url>/2019/03/06/%E7%BB%84%E4%BB%B6%E5%BA%93%E6%89%93%E5%8C%85%20umd%20%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<p>最近有个需求是将原本在项目内使用的组件文件夹打包发布的 npm，之后直接从 npm 安装使用。不再作为项目的代码。<br>接到需求，本以为是十分简单的任务，直接配置下 webpack，将打包输出格式改为 umd 打包，再发布的 npm 不就大功告成了吗？<br>但是在实际的实践中发现还是有些坑的。<br><a name="6592034f"></a></p><h5 id="一、打包"><a href="#一、打包" class="headerlink" title="一、打包"></a>一、打包</h5><p>umd 文件的好处是可以同时支持多种引入方式，自动判断现在的环境来决定代码的导出方式。比如用 script 标签引入的话，代码会被挂载到 window 对象， require 方式的话会以 module.exports 的方式导出等。<br>首先就是配置下 webpack 的配置文件。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: config.build.assetsRoot,</span><br><span class="line">  filename: utils.assetsPath(<span class="string">'js/[name].min.js'</span>),</span><br><span class="line">  library: <span class="string">'skel'</span>,</span><br><span class="line">  libraryTarget: <span class="string">'umd</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>将 libraryTarget 设置为 umd, library 指定插件的名称，这样就可以愉快的进行打包了。当然也可以设置 externals 将第三方库的文件排除，减小插件库的体积。为了方便测试，建议先不要加 externals，可以后期测试通过再加。<br>那么包打包出来了，怎么测试呢？首先，我们可以把打包出来的代码直接复制下来，粘贴到浏览器控制台（前提打包时没配置 externals，并且包不能过大，致使浏览器卡死），然后回车。这样我们打包后的代码就在浏览器上运行了，这时我们从 window 对象中查找有没有 skel (插件名)这个属性。当然也可以自己写段代码验证下，这样就没有了之前的两个限制。<br>我查看时发现window 对象有 skel 这个属性，但是值为 undefined，这说明我打的包出了问题。于是又去看   webpack 配置，并没有发现什么问题。于是找最终原因找了很长时间。<br>偶然我删除了将 node_modules 包单独打包出 vendor 的配置，发现 skel 为 undefined 的问题解决了。所以打包umd 时建议将第三方的库使用 externals 排除，不要打包到 vendor。</p><p><a name="1cc9c8d8"></a></p><h5 id="二、发布"><a href="#二、发布" class="headerlink" title="二、发布"></a>二、发布</h5><p>打包完后，接着就是使用 npm publish 命令发布了，发布时 package.json 文件有几项需要注意的配置:<br>  1.  main(入口文件一定要写打包后的 umd 文件)</p><ol start="2"><li>name 写插件名<br><a name="24e541cf"></a><h5 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h5>发布到 npm 后，我就试着验证了下是否可以直接在项目内使用。<br>首先我先删除了原来的组件库文件夹，及 webpack 对该文件夹目录配置的别名。<br>然后使用 npm 安装已发布的组件库。<br>因为之前都是使用的别名 skel 来引入的组件，所以现在使用 npm 安装 skel 后，之前的引入代码不用改。<br>接着启动项目。。。。。。。。。。。。<br>本以为可以正常启动，访问页面，结果出现下面的报错。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1551952979488-3d1d0ff6-8612-4ea7-baae-27bcd58b7a6a.png#align=left&display=inline&height=106&name=image.png&originHeight=364&originWidth=2558&size=182916&status=done&width=743" alt="image.png"><br>看到报错，第一反应就是 Object.keys 传入了 null 或者 undefined，于是去插件项目下全局查找 Object.keys 并打印它的传参（方法有些笨，不过还有效），然后运行了写插件项目的测试 demo，在页面发现打印出了上图打印的信息， Transition 组件的 propTypes 为 undefined。去查看组件代码并未发现什么错误，最终发现是 transform-react-remove-prop-types 这个插件的锅，再生产环境打包时把代码里的 propTypes 给移除了，导致遍历 key 时找不到而报错。于是我配置了下 ignoreName 将 Transition 文件排除，不移除该文件的 propTypes。<br>再次打包，然后直接将打包后的文件代码复制到项目 node_modules 下插件下的 skel.min.js 覆盖下，然后重启项目，果然，错误消失了。<br>但却来了新的警告，唉，头大。。。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1551953951676-c9478ab9-7f52-49b7-905a-30d1cacf1c01.png#align=left&display=inline&height=37&name=image.png&originHeight=74&originWidth=2558&size=42188&status=done&width=1279" alt="image.png"><br>网上大致搜了下，应该是引入的第三方库使用的是 es5 的 react 代码写法。<br>在已安装的依赖中，找到了两个依赖觉得可能是造成这个警告的原因， react-hot-loader 和 react-router, 在react-router 的压缩文件中搜了下确实搜到了 getDefaultProps , 于是将react-router 放到 externals 再打包，再复制，再重启项目，页面渲染成功，哈哈，欣喜。</li></ol><p>插件打包没啥问题了，重新发布公司的 npm 一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache配置下载目录</title>
      <link href="/2019/02/20/apache%E9%85%8D%E7%BD%AE%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/02/20/apache%E9%85%8D%E7%BD%AE%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>有时项目需求需要，后端需要另外搭建测试环境，前端需要提供针对该需求的代码包。如果每次前端更新都打包一次，然后将包发送给后端同事，后端同事再上传到后端搭建的服务器，解压，运行。未免太过浪费时间，这时候我们可以在自己的服务器搭建一个下载目录，使用 shell 编写一个打包并上传到下载目录的脚本, 这样我们每次改动后都可以快速的打包上传，后端直接从固定下载地址 wget 到后端测试环境相关目录下即可。</p><p>配置十分简单:<br><a id="more"></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen 3002</span><br><span class="line">&lt;VirtualHost *:3002&gt;</span><br><span class="line">    DocumentRoot "/var/www/download/"</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>然后需要更改下 /var/www/ 的目录配置，允许在找不到 index.html 时，显示目录结构。其中 Indexes 起了关键作用，去掉或者使用 -Indexes 都会禁用显示目录结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">Options Indexes FollowSymLinks</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>这样配置后，再配置下防火墙规则开启 3002 端口，就可以直接访问 ip:3002/ 下的文件及目录了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css包含块</title>
      <link href="/2019/02/19/css%E5%8C%85%E5%90%AB%E5%9D%97/"/>
      <url>/2019/02/19/css%E5%8C%85%E5%90%AB%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p><a name="509c0f1e"></a></p><h4 id="包含块的定义（个人理解）"><a href="#包含块的定义（个人理解）" class="headerlink" title="包含块的定义（个人理解）"></a>包含块的定义（个人理解）</h4><p>根元素（html）称为初始包含块。<br>css 包含块通常是指包含这个元素的最近的块类型的祖先元素。（如果父元素是 inline，则继续寻找父元素的父元素，以此类推）。但也有些例外情况，下面会介绍到。<br><a id="more"></a><br><a name="7de33813"></a></p><h4 id="确定包含块"><a href="#确定包含块" class="headerlink" title="确定包含块"></a>确定包含块</h4><p>为什么要确定一个元素的包含块呢？又是如何确定呢？<br>首先我们介绍下包含块的作用，包含块会直接影响到子元素的大小和位置，确定了包含块，我们才能知道当这个元素的 width、height、margin、padding、left、right、bottom、top 等属性使用百分比时是相对谁的百分之多少。<br>确定包含块和 css 中的 position 属性息息相关。</p><ul><li>position 为 static 和 relative 的（未脱离文档流的），包含块为离它最近的祖先块元素的内容区content（标准盒子模型即由 width 相关属性和 height 相关属性决定）</li><li>position 为 absolute 的，包含块为离它最近的 position 非 static 的祖先元素的内容区 content 和 内边距 padding 之和</li><li>position 为 fixed 的， 包含块为 视口 viewport。</li><li>position 为 absolute 和 fixed 的元素的包含块也受到其他属性的影响，举一个常用的 transform 属性，若是其祖先元素的有 transform 属性，且 transform 值不为 none, 则这个祖先元素就是其包含块。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu升级apache</title>
      <link href="/2019/02/12/ubuntu%E5%8D%87%E7%BA%A7apache/"/>
      <url>/2019/02/12/ubuntu%E5%8D%87%E7%BA%A7apache/</url>
      
        <content type="html"><![CDATA[<p>1.安装平台环境要求：<br><br>Ubuntu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You will need to ensure that you have either libtool 1.5.6</span><br><span class="line">or 2.2.6b, or later. Expat 2.0.1 and PCRE 8.02 are also</span><br><span class="line">recommended to be installed. If building PCRE from source,</span><br><span class="line">you&apos;ll also need g++.</span><br></pre></td></tr></table></figure><p>没有libtool和PCRE时，需要先安装libtool和PCRE<br><a id="more"></a></p><ol start="2"><li>下载解压apache2.4.38</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">$ wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.38.tar.gz</span><br><span class="line">$ tar zxvf httpd-2.4.38.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>进入httpd-2.4.38目录，执行命令安装apache2</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/apache2</span><br></pre></td></tr></table></figure><p>报错： configure: error: APR not found.  Please read the documentation.<br><br>通过INSTALL文件了解到需要安装APR and APR-Util</p><ol start="4"><li>安装APR and APR-Util到srclib目录下<br><br>进入httpd-2.4.38下的srclib目录，执行命令下载并解压APR and APR-Util</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://mirrors.hust.edu.cn/apache//apr/apr-1.6.5.tar.gz</span><br><span class="line">$ wget http://mirror.bit.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</span><br><span class="line">$ tar zxvf apr-1.6.5.tar.gz</span><br><span class="line">$ tar zxvf apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure><p>注意： 解压后的文件名不能带版本号，将apr-1.6.5改名为apr，apr-util-1.6.1改名为apr-util</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv apr-1.6.5 apr</span><br><span class="line">$ mv apr-util-1.6.1 apr-util</span><br><span class="line">$ rm apr-1.6.5.tar.gz apr-util-1.6.1.tar.gz</span><br></pre></td></tr></table></figure><ol start="5"><li>回到httpd-2.4.38根目录，再次执行./configure –prefix=/usr/local/apache2, 无报错后继续执行以下命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>成功执行后在/usr/local目录下会发现apache2已经存在</p><p>6.将原apache版本中定义的环境变量加到新的apache bin目录下的envvars文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2/bin</span><br><span class="line">$ cat /etc/apache2/envvars &gt;&gt; envvars</span><br></pre></td></tr></table></figure><p>7.修改httpd.conf, 注释掉listen 80和ServerAdmin，在文件尾添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServerTokens OS</span><br><span class="line"></span><br><span class="line"><span class="comment"># These need to be set in /usr/local/apache2/bin/envvars</span></span><br><span class="line"></span><br><span class="line">User <span class="variable">$&#123;APACHE_RUN_USER&#125;</span></span><br><span class="line"></span><br><span class="line">Group <span class="variable">$&#123;APACHE_RUN_GROUP&#125;</span></span><br><span class="line"></span><br><span class="line">IncludeOptional conf/sites-enabled/*.conf</span><br></pre></td></tr></table></figure><p>并将日志文件的路径替换为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ErrorLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class="line">CustomLog <span class="variable">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br></pre></td></tr></table></figure><p>将“User daemon  Group daemon” 改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User <span class="variable">$&#123;APACHE_RUN_USER&#125;</span></span><br><span class="line">Group <span class="variable">$&#123;APACHE_RUN_GROUP&#125;</span></span><br></pre></td></tr></table></figure><p>8.将旧版本apache下的 sites-enabled复制到/usr/local/apache2/conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r /etc/apache2/sites-enabled/ /usr/local/apache2/conf/</span><br></pre></td></tr></table></figure><p>9.停止旧的服务（或者开放新的端口进行测试），启动新版apache进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2/bin</span><br><span class="line">$ ./apachectl start</span><br></pre></td></tr></table></figure><p>报错：Invalid command ‘XSendFile’, perhaps misspelled or defined by a module not included in the server configuration<br><br>这种报错是因为有些模块没有加载造成的，进入旧版apache的模块目录，将缺少的模块复制到新版中，并在httpd.conf中加载即可(也可以自己下载)<br><br>测试发现缺少mod_xsendfile.so和mod_wsgi.so</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/lib/apache2/modules/mod_xsendfile.so /usr/<span class="built_in">local</span>/apache2/modules</span><br><span class="line">$ cp /usr/lib/apache2/modules/mod_wsgi.so /usr/<span class="built_in">local</span>/apache2/modules</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2/modules</span><br><span class="line">$ sudo chmod +x mod_xsendfile.so mod_wsgi.so</span><br></pre></td></tr></table></figure><p>在新版本的httpd.conf中加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoadModule wsgi_module modules/mod_wsgi.so</span><br><span class="line">LoadModule xsendfile_module modules/mod_xsendfile.so</span><br></pre></td></tr></table></figure><p>重启新版apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache2/bin</span><br><span class="line">$ ./apachectl restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯css固定宽高比</title>
      <link href="/2019/01/29/%E7%BA%AFcss%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E6%AF%94/"/>
      <url>/2019/01/29/%E7%BA%AFcss%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p><a name="66110641"></a></p><h4 id="引入问题"><a href="#引入问题" class="headerlink" title="引入问题"></a>引入问题</h4><p>在我们做项目时，时常会有高度不确定的情况，但经常碰到固定宽高比需求，这时就有点抓虾了。第一想到的可能就是通过 js 来实现了。但是我想说，纯 css 一样可以实现，而且比较简单。<br><a name="fa77ab6c"></a></p><h4 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h4><p>例如实现下面这个效果:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1548832026870-8c999c13-c903-414a-92d7-a087b9b14525.png#align=left&display=inline&height=127&name=image.png&originHeight=254&originWidth=490&size=12911&status=done&width=245" alt="image.png"><br><a id="more"></a><br>首先我们需要对元素进行分列，这里分为四列，这里我是通过百分比进行的分列，宽度为20%，然后剩余的20%分给方块之间的 margin，这样就实现了四列布局，但是当我们改变这个容器的大小测试时，由于容器的width变化，导致每个小方块的 width 值时大时小，会发现方块并不是按长和宽1比1来的，也就是说不是正方形。<br><a name="0483f6d1"></a></p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>那么，怎么才能让长宽比维持在1：1呢，通过css来实现的方法也很多，但是，重要的是要抓住和理解这么一个原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当元素的padding或者margin使用的不是具体数值，而是百分比时，元素的margin及padding是相对其父元素的width而言的</span><br></pre></td></tr></table></figure><p>从这里我们可以知道，当我们设置 margin或padding 的上下边距（竖直方向）为百分比时，是相对其父元素宽度（水平方向）而言的，这也就建立了长（竖直方向）与宽（水平方向）的关系。</p><ol><li>通过添加填充div撑起小方块高度实现</li></ol><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fill"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fill</span> &#123;</span><br><span class="line">  padding-bottom: 100%; // 或 margin-bottom: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1561348096175-103d148c-d087-449e-8765-588ea6232de7.png#align=left&display=inline&height=102&name=image.png&originHeight=204&originWidth=200&size=4616&status=done&width=100" alt="image.png"><br>2.通过伪元素:after或者:before实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.square:before //.square:after  &#123;</span><br><span class="line">  content: '';</span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">  <span class="selector-tag">height</span>: 0;</span><br><span class="line">  padding-bottom: 100%; // 或 margin-bottom: 100%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果完全相同</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器跨标签通信</title>
      <link href="/2019/01/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/01/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>情景：用户用A账号登录网站后，新开一个tab页面点击了注销，又用B账号登录，这时两个页面的登录状态就不一致了，旧的页面做一些操作时会向后端发请求，这时发现登录状态为下线，会重定向到登录页让用户登录。这样用户体验会比较差。<br>优化：能不能让新的tab页面向旧页面发个消息，告知旧页面登录状态改变了，旧页面弹窗告知用户需要同步两个tab页的登录状态，用户点击确定按钮将旧页面的登录状态同步为最新。</p><p>这样，用户体验会好很多，但同时也涉及的一个问题 —— 如何实现通浏览器下两个不同标签页间的通信。</p><p>网上查阅一番后， 发现使用<code>localStorage</code>可以实现这一点。</p><p>具体实现思路：将用户的id存在<code>localstorage</code>, 新用户登录后，更新<code>localstorage</code>的userId, 会触发<code>storage</code>事件，旧页面监听到这个事件时，对比下新的值是不是和现在登录的userId一样，不一样时弹窗告知用户需要同步登录状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-浏览器兼容</title>
      <link href="/2019/01/14/css-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
      <url>/2019/01/14/css-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p><a name="3f95cecc"></a></p><h3 id="1-important区分FireFox和IE6"><a href="#1-important区分FireFox和IE6" class="headerlink" title="1. !important区分FireFox和IE6"></a>1. <code>!important</code>区分FireFox和IE6</h3><p>!importIE7已经支持，现在作为区分FF和IE6的标识，在FireFox里<code>!important</code>的权重要高于不加<code>!important</code>的权重；而IE6则不认识<code>!important</code>，所以你加了和不加一样，这样，我们就可以利用这个特点来让两个浏览器显示不同的样式。例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><br>效果就是在火狐显示字体颜色是蓝色，在IE6显示红色。但是<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">blue</span> !<span class="selector-tag">important</span>;</span><br><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><p>的顺序不能改变，IE6不认识<code>!important</code>，所以会blue和red权重是一样的，但是red定义晚，因此IE6显示红色。<br><br>不过不推荐使用<code>!important</code>，因为它破坏了css原有的优先级规则，使得样式bug的调试更为复杂。以下为几点建议：</p><ul><li><p>Always 要优化考虑使用样式规则的优先级来解决问题而不是 !important</p></li><li><p>Only 只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 !important</p></li><li><p>Never 永远不要在全站范围的 css 上使用 !important</p></li><li><p>Never 永远不要在你的插件中使用 !important<br><a name="04a3cf5d"></a></p><h3 id="2-CSShack"><a href="#2-CSShack" class="headerlink" title="2. CSShack"></a>2. <code>CSS</code>hack</h3><p><a name="df766c24"></a></p><h4 id="CSS-hack需要遵循以下三条原则："><a href="#CSS-hack需要遵循以下三条原则：" class="headerlink" title="CSS hack需要遵循以下三条原则："></a>CSS hack需要遵循以下三条原则：</h4></li><li><p>有效： 能够通过 Web 标准的验证</p></li><li><p>只针对太古老的/不再开发的/已被抛弃的浏览器， 而不是目前的主流浏览器</p></li><li><p>代码要丑陋。让人记住这是一个不得已而为之的 Hack, 时刻记住要想办法去掉它。现在很多hacks已经抛弃了最初的原则，而滥用hack会导致浏览器更新之后产生更多的兼容性问题。因此，并不推荐使用CSS hack来解决兼容性问题。<br><a name="b3b17a23"></a></p><h4 id="CSS-Hack有三种实现方式"><a href="#CSS-Hack有三种实现方式" class="headerlink" title="CSS Hack有三种实现方式"></a>CSS Hack有三种实现方式</h4><p>它们分别是：CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。所以说，IE是所有前端程序员的痛。接下来，我们就以IE6和IE7为例，简单介绍下这三类CSS hack。</p></li><li><p>CSS属性前缀法<br><br>IE6能识别<em>和</em>， IE7能识别_，例如下面代码：<br><br>针对IE6和IE7</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    *background: red;// IE6和IE7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>针对IE6</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    _background: blue;// IE6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区分IE6和IE7（也可以用后面提到的<em>html和</em>+html区分）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    _background: red;// IE6</span><br><span class="line">    background: blue !important;// IE7已经识别!important</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>选择器前缀法<br><br>IE6识别<em>html，IE7识别</em>+html，所以下面代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*html div &#123;//IE6</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">red</span></span><br><span class="line">&#125;</span><br><span class="line">*+html div &#123;//IE7</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-tag">blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IE条件注释法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if IE]</span>&gt;</span><br><span class="line">只在<span class="selector-tag">ie</span>下生效</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if gte IE 6]</span>&gt;</span><br><span class="line">只在<span class="selector-tag">IE6</span>以上(包括)版本<span class="selector-tag">IE</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if !IE 8]</span>&gt;</span><br><span class="line">只在非<span class="selector-tag">IE8</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if !IE]</span>&gt;</span><br><span class="line">只在非<span class="selector-tag">IE</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语雀自动部署hexo+GithubPages博客</title>
      <link href="/2019/01/11/%E8%AF%AD%E9%9B%80%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo+GithubPages%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/11/%E8%AF%AD%E9%9B%80%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo+GithubPages%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p><a name="8e1b944f"></a></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>相信很多人被hexo+github pages实现的blog的发布问题烦恼，在编写完文章之后， 需要我们打开终端，执行 hexo 命令来发布文章。更让人头疼的是若是想插入个表格或者是图片的话，那可费了老劲了，利用 markdown 写表格的效率着实不高，而且引入图片的话更是麻烦，需要手动引入图片到博客项目，而且很难控制图片的大小。。。除去这些不说，hexo写的文章还比较容易丢失，一旦不小心把 hexo 删了，想要恢复就很麻烦了，但是使用语雀自动部署博文就不用担心这个问题，大不了重新同步一遍嘛，哈哈哈！</p><p>但是不久前接触到了语雀，并看到开发者文档里有一些非常好用的api，更有webhook的功能，便有了利用语雀来部署hexo搭建的blog的想法。大体思路就是，<a id="more"></a> 当我们发布更新文章时会出发webhook,然后我们在自己搭建的服务里监听这个post请求，一旦监听到这个请求说明有文章的变动了，这时，再根据开发者文档上的api拉取当前的文章信息，根据这些信息生成md文件，然后执行’hexo clean &amp;&amp; hexo d -g’来更新我们的博文到github pages。</p><p>有了想法，当然撸起袖子加油干了，在测试完webhook后，接下来就是写代码请求文章信息然后创建文件了，但是懒惰的我看到已经有人实现了，就直接借用人家的写好的用好了。<a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">yuque-hexo</a></p><p>废话少说，下面写下我的实现方式。<br><a name="38164c8b"></a></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>首先， 在你的云服务器上安装hexo-cli , <code>npm install hexo-cli -g</code></p><p>然后创建一个hexo项目， <code>hexo init blog</code>      创建完项目之后，根据自己的喜好配置下项目的主题，及你要部署的github pages地址（建议写ssh地址），之后将你的云主机的ssh公钥配置到github上，实现免密发布文章，具体配置方法不再赘述。<br>注：在将云主机公钥配置到github上后，初次发布文章需要运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><ul><li>在hexo配置文件_config.yml里配置部署仓库地址</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1547211877764-a0e8d795-9be3-4ec8-b751-ef4592031314.png#align=left&display=inline&height=118&name=image.png&originHeight=236&originWidth=1488&size=28109&status=done&width=744" alt="image.png"><br>接下来，在项目根目录下创建package.json及deploy.js文件, 根据我的package.json和deploy.js来编写刚才创建的两个文件的内容。package.json文件需要注意将login写为你的login，repo改为你的仓库的id(注意不能是仓库名，需要id)。deploy.js内容可以和我的完全一样，也可以自己修改下端口（注意主机的防火墙规则开启这个端口哦）。</p><ul><li>package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"3.8.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"npm run remove &amp;&amp; npm run sync &amp;&amp; hexo clean &amp;&amp; hexo d -g"</span>,</span><br><span class="line">    <span class="attr">"sync"</span>: <span class="string">"DEBUG=yuque-hexo.* yuque-hexo sync"</span>,</span><br><span class="line">    <span class="attr">"clean:yuque"</span>: <span class="string">"DEBUG=yuque-hexo.* yuque-hexo clean"</span>,</span><br><span class="line">    <span class="attr">"reset"</span>: <span class="string">"npm run clean:yuque &amp;&amp; npm run sync"</span>,</span><br><span class="line">    <span class="attr">"remove"</span>: <span class="string">"rm -rf source/_posts/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"yuqueConfig"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">    <span class="attr">"login"</span>: <span class="string">"xxxx"</span>,</span><br><span class="line">    <span class="attr">"repo"</span>: <span class="string">"grgc1v"</span>,</span><br><span class="line">    <span class="attr">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">    <span class="attr">"postPath"</span>: <span class="string">"source/_posts/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.7.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-deployer-git"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="attr">"koa"</span>: <span class="string">"^2.6.2"</span>,</span><br><span class="line">    <span class="attr">"koa-bodyparser"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"koa-router"</span>: <span class="string">"^7.4.0"</span>,</span><br><span class="line">    <span class="attr">"yuque-hexo"</span>: <span class="string">"^1.3.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>deploy.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// route</span></span><br><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  process.spawn(<span class="regexp">/^win/</span>.test(process.platform) ? <span class="string">'npm.cmd'</span> : <span class="string">'npm'</span>, [<span class="string">'run'</span>,  <span class="string">'deploy'</span>]);</span><br><span class="line">  ctx.body = <span class="string">'update success'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3001</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[server] deploy server starting at 3001'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后，在项目根目录下执行<code>npm install</code>安装依赖项。通过deploy.js监听的端口及你的云主机的ip来来确定服务地址，在语雀的知识库设置中设置webhook地址。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1547202962939-9d21ccba-af18-4fb2-bdc3-59b748ae0e2b.png#align=left&display=inline&height=634&name=image.png&originHeight=1268&originWidth=2410&size=200639&status=done&width=1205" alt="image.png"></p><p>还需要注意的一点是需要在高级设置中将你的仓库设置为公开权限。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/242991/1552619550749-e246e575-d465-49bf-9012-8c0f4430d308.png#align=left&display=inline&height=287&name=image.png&originHeight=573&originWidth=990&size=47931&status=done&width=495" alt="image.png"><br>完成这些之后基本大功告成了。</p><p>接下来我们测试下。</p><p>在云主机的项目根目录实现我们的deploy.js, <code>pm2 start deploy</code>, 没安装pm2可以执行以下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><p>之后去你的仓库下新建个文章发布下检测下是否同步更新的你的github pages吧！<br>如果测试后发现没有实现自动部署，可以执行以下命令，查看错误原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>下面附上我的【<a href="https://github.com/sunnyBob/yuque-hexo-config.git" target="_blank" rel="noopener">配置</a>】<br><a name="f130d11f"></a></p><h4 id="图片大小问题"><a href="#图片大小问题" class="headerlink" title="图片大小问题"></a>图片大小问题</h4><p>在语雀插入的图片，更新到我们的 blog 后，会发现显示的图片大小和插入时不一样，这是因为 blog 里的图片是按照原始大小显示的，观察图片路径，会发现其中包含了图片的当前大小以及原始大小信息，类似这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.nlark.com/yuque/0/2019/png/242991/1554799009812-0da6e023-b092-4172-a55d-bd247c79a133.png#align=left&amp;display=inline&amp;height=217&amp;name=image.png&amp;originHeight=678&amp;originWidth=678&amp;size=18409&amp;status=done&amp;width=217</span><br></pre></td></tr></table></figure><p>然后我们可以自己写 js，使用正则把大小信息取出来，并设置到图片上，具体 js 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>);</span><br><span class="line">images.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> src = image.getAttribute(<span class="string">'src'</span>);</span><br><span class="line">  <span class="keyword">var</span> regex = <span class="regexp">/width=([0-9]+)|height=([0-9]+)/g</span>;</span><br><span class="line">  <span class="keyword">var</span> size = src.match(regex);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(size) === <span class="string">'[object Array]'</span> &amp;&amp; size.length) &#123;</span><br><span class="line">    size.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = item.split(<span class="string">'='</span>);</span><br><span class="line">      image.setAttribute(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将这段代码贴到页面最后的 script 标签里，会发现照片大小和我们所期望的一样了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
